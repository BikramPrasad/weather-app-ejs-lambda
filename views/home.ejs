<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Weather Forecast</title>
    <link
      rel="icon"
      href="https://i.postimg.cc/k45QR038/weather-app.png"
      type="image/png"
    />
    <link
      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css"
      rel="stylesheet"
    />
    <style>
      body {
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        background: linear-gradient(-45deg, #a1c4fd, #c2e9fb, #fbc2eb, #a6c1ee);
        background-size: 400% 400%;
        animation: gradientBG 15s ease infinite;
        margin: 0;
        padding: 0;
        min-height: 100vh;
        display: flex;
        justify-content: center;
        align-items: center;
      }

      @keyframes gradientBG {
        0% {
          background-position: 0% 50%;
        }
        50% {
          background-position: 100% 50%;
        }
        100% {
          background-position: 0% 50%;
        }
      }

      .container {
        background-color: rgba(255, 255, 255, 0.9);
        border-radius: 15px;
        box-shadow: 0 10px 25px rgba(0, 0, 0, 0.1);
        width: 90%;
        max-width: 600px;
        padding: 30px;
      }

      h1 {
        text-align: center;
        color: #2d3748;
        margin-bottom: 30px;
      }

      .location-box {
        text-align: center;
        margin-bottom: 20px;
      }

      #city-form {
        display: flex;
        flex-direction: column;
        gap: 15px;
      }

      .input-group {
        display: flex;
        border: 1px solid #cbd5e0;
        border-radius: 8px;
        overflow: hidden;
      }

      input[type='text'] {
        flex: 1;
        padding: 15px;
        border: none;
        font-size: 16px;
        outline: none;
      }

      button {
        background-color: #4299e1;
        color: white;
        border: none;
        padding: 12px 20px;
        cursor: pointer;
        font-size: 16px;
        font-weight: 600;
        transition: background-color 0.3s;
      }

      button:hover {
        background-color: #3182ce;
      }

      .or-divider {
        display: flex;
        align-items: center;
        margin: 20px 0;
        color: #718096;
      }

      .divider-line {
        flex: 1;
        height: 1px;
        background-color: #e2e8f0;
      }

      .divider-text {
        padding: 0 15px;
      }

      #geolocate-btn {
        background-color: #48bb78;
        display: flex;
        justify-content: center;
        align-items: center;
        gap: 8px;
      }

      #geolocate-btn:hover {
        background-color: #38a169;
      }

      .error-message {
        color: #e53e3e;
        background-color: #fed7d7;
        padding: 10px;
        border-radius: 5px;
        margin-top: 15px;
        display: none;
        animation: fadein 0.3s ease;
      }

      .made-by {
        text-align: center;
        margin-top: 20px;
        font-size: 14px;
        color: #4a5568;
      }

      @keyframes fadein {
        from {
          opacity: 0;
        }
        to {
          opacity: 1;
        }
      }

      @media (max-width: 600px) {
        .container {
          width: 95%;
          padding: 20px;
        }
      }
    </style>
  </head>
  <body>
    <div class="container">
      <h1>Weather Forecast</h1>

      <div class="location-box">
        <form id="city-form" onsubmit="handleCitySubmit(event)">
          <div class="input-group">
            <input
              type="text"
              id="city"
              name="city"
              placeholder="Enter city name"
              value="<%= locals.city || '' %>"
            />
            <button type="submit">Search</button>
          </div>

          <div class="or-divider">
            <div class="divider-line"></div>
            <span class="divider-text">OR</span>
            <div class="divider-line"></div>
          </div>

          <button type="button" id="geolocate-btn">
            <i class="fas fa-location-dot"></i> Use My Current Location
          </button>
        </form>

        <div class="error-message" id="error-msg">
          <%= locals.error?.info || '' %>
        </div>
      </div>
      <footer class="made-by">Made with ❤️ by <strong>Bikram</strong></footer>
    </div>

    <script>
      const geolocateBtn = document.getElementById('geolocate-btn');
      const cityInput = document.getElementById('city');
      const errorDiv = document.getElementById('error-msg');

      async function handleCitySubmit(e) {
        e.preventDefault();
        const city = cityInput.value.trim();

        if (!city) {
          showError('Please enter your city');
          return;
        }

        try {
          const response = await fetch(
            `/weather?city=${encodeURIComponent(city)}`,
            {
              method: 'GET',
              headers: { 'X-Requested-With': 'XMLHttpRequest' },
            }
          );

          const contentType = response.headers.get('content-type');

          if (contentType && contentType.includes('application/json')) {
            const result = await response.json();
            if (result.error) {
              showError(result.error);
              cityInput.value = '';
              return;
            }
          }
          window.location.href = `/weather?city=${encodeURIComponent(city)}`;
        } catch (err) {
          console.error(err);
          showError('Something went wrong. Try again.');
        }
      }

      // Geolocation button handler
      geolocateBtn.addEventListener('click', () => {
        if (navigator.geolocation) {
          navigator.geolocation.getCurrentPosition(
            (position) => {
              const lat = position.coords.latitude;
              const lon = position.coords.longitude;
              window.location.href = `/weather?lat=${lat}&lon=${lon}`;
            },
            (error) => {
              let message = 'Unable to retrieve your location. ';
              switch (error.code) {
                case error.PERMISSION_DENIED:
                  message += 'Permission denied.';
                  break;
                case error.POSITION_UNAVAILABLE:
                  message += 'Location unavailable.';
                  break;
                case error.TIMEOUT:
                  message += 'Request timed out.';
                  break;
                default:
                  message += 'An unknown error occurred.';
              }
              showError(message);
            }
          );
        } else {
          showError('Geolocation is not supported by your browser.');
        }
      });

      // Show error with auto hide
      function showError(msg) {
        errorDiv.textContent = msg;
        errorDiv.style.display = 'block';
        setTimeout(() => {
          errorDiv.style.display = 'none';
        }, 3000);
      }

      // Auto-show and auto-hide server-passed errors
      if (errorDiv.textContent.trim() !== '') {
        errorDiv.style.display = 'block';
        setTimeout(() => {
          errorDiv.style.display = 'none';
        }, 3000);
      }
    </script>
  </body>
</html>
